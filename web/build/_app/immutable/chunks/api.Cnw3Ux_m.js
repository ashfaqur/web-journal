const o="http://192.168.2.221:8181",k="violet",u=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],p=[{date:"29/03",state:"Complete",points:272},{date:"30/03",state:"Complete",points:302},{date:"31/03",state:"Complete",points:120},{date:"01/04",state:"Complete",points:189},{date:"02/04",state:"Complete",points:131},{date:"03/04",state:"Complete",points:110},{date:"04/04",state:"Complete",points:81},{date:"05/04",state:"Complete",points:110},{date:"06/04",state:"Complete",points:64},{date:"07/04",state:"Complete",points:68},{date:"08/04",state:"Complete",points:115},{date:"09/04",state:"Complete",points:167},{date:"10/04",state:"Complete",points:101},{date:"11/04",state:"Complete",points:185},{date:"12/04",state:"Complete",points:142},{date:"13/04",state:"Complete",points:144},{date:"14/04",state:"Complete",points:80},{date:"15/04",state:"Complete",points:110},{date:"16/04",state:"Complete",points:229},{date:"17/04",state:"Complete",points:142},{date:"18/04",state:"Complete",points:98},{date:"19/04",state:"Complete",points:127},{date:"20/04",state:"Incomplete",points:57},{date:"21/04",state:"Incomplete",points:0},{date:"22/04",state:"Complete",points:84},{date:"23/04",state:"Complete",points:107},{date:"24/04",state:"Incomplete",points:104},{date:"25/04",state:"Complete",points:224},{date:"26/04",state:"Complete",points:140},{date:"27/04",state:"None",points:0}],c=[{title:"Exercise",data:[{date:"2025-09-01",totalProgress:10,dailyProgress:2},{date:"2025-09-02",totalProgress:13,dailyProgress:3},{date:"2025-09-03",totalProgress:16,dailyProgress:3},{date:"2025-09-04",totalProgress:20,dailyProgress:4},{date:"2025-09-05",totalProgress:24,dailyProgress:4},{date:"2025-09-06",totalProgress:27,dailyProgress:3},{date:"2025-09-07",totalProgress:31,dailyProgress:4},{date:"2025-09-08",totalProgress:35,dailyProgress:4},{date:"2025-09-09",totalProgress:39,dailyProgress:4},{date:"2025-09-10",totalProgress:44,dailyProgress:5}]},{title:"Reading",data:[{date:"2025-09-01",totalProgress:20,dailyProgress:4},{date:"2025-09-02",totalProgress:24,dailyProgress:4},{date:"2025-09-03",totalProgress:27,dailyProgress:3},{date:"2025-09-04",totalProgress:31,dailyProgress:4},{date:"2025-09-05",totalProgress:36,dailyProgress:5},{date:"2025-09-06",totalProgress:39,dailyProgress:3},{date:"2025-09-07",totalProgress:43,dailyProgress:4},{date:"2025-09-08",totalProgress:47,dailyProgress:4},{date:"2025-09-09",totalProgress:51,dailyProgress:4},{date:"2025-09-10",totalProgress:56,dailyProgress:5}]}];async function P(e){const t=await b(e),a=t.data,s=t.isFallback,n=a.map(r=>r.date),i=a.map(r=>r.points),d=a.map(r=>r.state);let l=new Map;return d.forEach(r=>{l.set(r,(l.get(r)||0)+1)}),l.forEach((r,g)=>{r!==0&&l.set(g,Math.round(r*100/d.length))}),{dates:n,points:i,states:d,stateCounts:l,fallback:s}}function w(e){return!!(u.includes(e.toLowerCase())||/^#([A-Fa-f0-9]{3}){1,2}$/.test(e)||/^rgb(a)?\((\s*\d+\s*,){2,3}\s*\d+\s*\)$/.test(e)||/^hsl(a)?\(\s*\d+\s*,\s*\d+%?,\s*\d+%?\s*(,\s*\d+(\.\d+)?\s*)?\)$/.test(e))}function C(e){if(!/^\d{4}-\d{2}-\d{2}$/.test(e))return e;const[t,a,s]=e.split("-");return`${s}/${a}`}function y(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)&&Object.values(e).every(t=>Array.isArray(t)&&t.every(a=>typeof a=="object"&&a!==null&&"date"in a&&typeof a.date=="string"&&"count"in a&&typeof a.count=="number"))}function f(e){return Array.isArray(e)&&e.every(t=>Array.isArray(t)&&t.length===3&&typeof t[0]=="string"&&typeof t[1]=="string"&&typeof t[2]=="number")}function m(e){return Array.isArray(e)&&e.every(t=>typeof t.date=="string"&&typeof t.state=="string"&&typeof t.points=="number")}function h(e){return Object.entries(e).map(([t,a])=>({title:t,data:a.map(([s,n,i])=>({date:s,totalProgress:n,dailyProgress:i}))}))}async function v(){try{console.log("Fetching progress data from server:",o);const e=await fetch(`${o}/progress`),t=await e.json();return e.ok?{data:h(t),isFallback:!1}:(console.warn("Response for fetching progress data is not OK, so falling back to stub data"),{data:c,isFallback:!0})}catch(e){return console.error("Network error for fetching progress data:",e),console.log("Falling back to stub progress data after fetch error"),{data:c,isFallback:!0}}}async function F(e){console.log(`Fetching last ${e} days counter data from server:`,o);const a=await(await fetch(`${o}/count/${e}`)).json();return y(a)?{data:a,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:{},isFallback:!0})}async function $(e,t){console.log(`Fetching last ${t} days counter data from server:`,o);const s=await(await fetch(`${o}/counter_total/${encodeURIComponent(e)}/${t}`)).json();return f(s)?{data:s,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:[],isFallback:!0})}async function b(e){const t=p.slice(0,e);try{console.log(`Fetching last ${e} days from server:`,o);const a=await fetch(`${o}/lastdays/${e}`);if(!a.ok)return console.warn("Response not OK, falling back to stub data"),{data:t,isFallback:!0};const s=await a.json();return m(s)?{data:s,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:t,isFallback:!0})}catch(a){return console.error("Network error fetching last 30 days:",a),console.log("Falling back to stub data after fetch error"),{data:t,isFallback:!0}}}async function D(){return fetch(`${o}/health`).then(e=>e.ok).catch(()=>!1)}export{C as a,F as b,v as c,k as d,$ as f,w as i,P as p,D as s};
