const r="http://0.0.0.0:8181",h="violet",c=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],p=[{date:"29/03",state:"Complete",points:272},{date:"30/03",state:"Complete",points:302},{date:"31/03",state:"Complete",points:120},{date:"01/04",state:"Complete",points:189},{date:"02/04",state:"Complete",points:131},{date:"03/04",state:"Complete",points:110},{date:"04/04",state:"Complete",points:81},{date:"05/04",state:"Complete",points:110},{date:"06/04",state:"Complete",points:64},{date:"07/04",state:"Complete",points:68},{date:"08/04",state:"Complete",points:115},{date:"09/04",state:"Complete",points:167},{date:"10/04",state:"Complete",points:101},{date:"11/04",state:"Complete",points:185},{date:"12/04",state:"Complete",points:142},{date:"13/04",state:"Complete",points:144},{date:"14/04",state:"Complete",points:80},{date:"15/04",state:"Complete",points:110},{date:"16/04",state:"Complete",points:229},{date:"17/04",state:"Complete",points:142},{date:"18/04",state:"Complete",points:98},{date:"19/04",state:"Complete",points:127},{date:"20/04",state:"Incomplete",points:57},{date:"21/04",state:"Incomplete",points:0},{date:"22/04",state:"Complete",points:84},{date:"23/04",state:"Complete",points:107},{date:"24/04",state:"Incomplete",points:104},{date:"25/04",state:"Complete",points:224},{date:"26/04",state:"Complete",points:140},{date:"27/04",state:"None",points:0}];async function b(e){const t=await f(e),a=t.data,o=t.isFallback,i=a.map(s=>s.date),d=a.map(s=>s.points),l=a.map(s=>s.state);let n=new Map;return l.forEach(s=>{n.set(s,(n.get(s)||0)+1)}),n.forEach((s,u)=>{s!==0&&n.set(u,Math.round(s*100/l.length))}),{dates:i,points:d,states:l,stateCounts:n,fallback:o}}function k(e){return!!(c.includes(e.toLowerCase())||/^#([A-Fa-f0-9]{3}){1,2}$/.test(e)||/^rgb(a)?\((\s*\d+\s*,){2,3}\s*\d+\s*\)$/.test(e)||/^hsl(a)?\(\s*\d+\s*,\s*\d+%?,\s*\d+%?\s*(,\s*\d+(\.\d+)?\s*)?\)$/.test(e))}function C(e){if(!/^\d{4}-\d{2}-\d{2}$/.test(e))return e;const[t,a,o]=e.split("-");return`${o}/${a}`}function g(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)&&Object.values(e).every(t=>Array.isArray(t)&&t.every(a=>typeof a=="object"&&a!==null&&"date"in a&&typeof a.date=="string"&&"count"in a&&typeof a.count=="number"))}function m(e){return Array.isArray(e)&&e.every(t=>Array.isArray(t)&&t.length===3&&typeof t[0]=="string"&&typeof t[1]=="string"&&typeof t[2]=="number")}function y(e){return Array.isArray(e)&&e.every(t=>typeof t.date=="string"&&typeof t.state=="string"&&typeof t.points=="number")}async function w(e){console.log(`Fetching last ${e} days counter data from server:`,r);const a=await(await fetch(`${r}/count/${e}`)).json();return g(a)?{data:a,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:{},isFallback:!0})}async function v(e,t){console.log(`Fetching last ${t} days counter data from server:`,r);const o=await(await fetch(`${r}/counter_total/${encodeURIComponent(e)}/${t}`)).json();return m(o)?{data:o,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:[],isFallback:!0})}async function f(e){const t=p.slice(0,e);try{console.log(`Fetching last ${e} days from server:`,r);const a=await fetch(`${r}/lastdays/${e}`);if(!a.ok)return console.warn("Response not OK, falling back to stub data"),{data:t,isFallback:!0};const o=await a.json();return y(o)?{data:o,isFallback:!1}:(console.warn("Data format invalid, falling back to stub"),{data:t,isFallback:!0})}catch(a){return console.error("Network error fetching last 30 days:",a),console.log("Falling back to stub data after fetch error"),{data:t,isFallback:!0}}}async function $(){return fetch(`${r}/health`).then(e=>e.ok).catch(()=>!1)}export{C as a,w as b,h as d,v as f,k as i,b as p,$ as s};
